
- name: Clone a git repository 'nc/tf' into /opt.
  git:
    repo: "{{ akraino_repo_url }}"
    version: "{{ akraino_repo_branch }}"
    dest: /opt/akraino-tf

- name: copy {{ private_key_file }} on rc_host 
  copy:
    src: "{{ private_key_file }}"
    dest: /opt/akraino-tf/ssh_key.pem
    owner: root
    group: root
    mode: '0600'

- name: preparing setup-env.sh
  template:
    src: setup-env.sh.j2
    dest: /opt/akraino-tf/setup-env.sh
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: running local web-server with screen -d -m python3 -m http.server
  shell: screen -d -m python3 -m http.server
  args:
    chdir: /opt/akraino-tf
  register: screen
  retries: 5
  until: screen.rc == 0

- name: generate yaml files 
  shell: bash -c 'source setup-env.sh; cat objects.yaml.env | envsubst > objects.yaml; cat TF_blueprint.yaml.env | envsubst > TF_blueprint.yaml'
  args:
    chdir: /opt/akraino-tf

- name: create objects 
  shell: bash -c 'source setup-env.sh; /opt/api-server/scripts/rc_loaddata -H $RC_HOST -u $RC_USER -p $RC_PW -A objects.yaml'
  args:
    chdir: /opt/akraino-tf

- name: create blueprint
  shell: bash -c 'source setup-env.sh; /opt/api-server/scripts/rc_cli -H $RC_HOST -u $RC_USER -p $RC_PW blueprint create TF_blueprint.yaml'
  args:
    chdir: /opt/akraino-tf


- name: extract edgesite_uuid
  shell: bash -c 'source setup-env.sh; /opt/api-server/scripts/rc_cli -H $RC_HOST -u $RC_USER -p $RC_PW edgesite list | grep TF_Edgesite | cut -f1 -d " "'
  args:
    chdir: /opt/akraino-tf
  register: edgesite_uuid

- set_fact:
    edgesite_uuid="{{ edgesite_uuid.stdout }}"

- debug: var=edgesite_uuid  

- name: extract blueprint_uuid
  shell: bash -c 'source setup-env.sh; /opt/api-server/scripts/rc_cli -H $RC_HOST -u $RC_USER -p $RC_PW blueprint list | grep "TF Edge Cloud" | cut -f1 -d " "'
  args:
    chdir: /opt/akraino-tf
  register: blueprint_uuid

- set_fact:
    blueprint_uuid="{{ blueprint_uuid.stdout }}"
   
- debug: var=blueprint_uuid   

- name: add new environment variable ESID into setup-env.sh
  shell: echo "export ESID={{ edgesite_uuid }}" >>setup-env.sh
  args:
    chdir: /opt/akraino-tf

- name: add new environment variable BPID into setup-env.sh
  shell: echo "export BPID={{ blueprint_uuid }}" >>setup-env.sh
  args:
    chdir: /opt/akraino-tf

- name: generate POD.yaml file 
  shell: bash -c 'source setup-env.sh; cat POD.yaml.env | envsubst > POD.yaml'
  args:
    chdir: /opt/akraino-tf

- name: cat POD.yaml 
  shell: cat POD.yaml
  args:
    chdir: /opt/akraino-tf
  register: pod

- debug: var=pod.stdout_lines  

- name: create POD
  shell: bash -c 'source setup-env.sh; /opt/api-server/scripts/rc_cli -H $RC_HOST -u $RC_USER -p $RC_PW pod  create POD.yaml'
  args:
    chdir: /opt/akraino-tf

- name: extract pod_uuid
  shell: bash -c 'source setup-env.sh; /opt/api-server/scripts/rc_cli -H $RC_HOST -u $RC_USER -p $RC_PW pod list | grep "{{ blueprint_uuid }}" | cut -f1 -d " "'
  args:
    chdir: /opt/akraino-tf
  register: pod_uuid

- set_fact:
    pod_uuid="{{ pod_uuid.stdout }}"
   
- debug: var=pod_uuid   

- name: create POD
  shell: bash -c 'source setup-env.sh; /opt/api-server/scripts/rc_cli -H $RC_HOST -u $RC_USER -p $RC_PW pod show {{ pod_uuid }}'
  args:
    chdir: /opt/akraino-tf
  register: pod_show

- debug: var=pod_show.stdout_lines

- name: Waiting for POD status == WORKFLOW (7 min)
  shell: bash -c 'source setup-env.sh; /opt/api-server/scripts/rc_cli -H $RC_HOST -u $RC_USER -p $RC_PW pod show {{ pod_uuid }} | grep state'
  args:
    chdir: /opt/akraino-tf
  register: pod_state
  retries: 7
  delay: 60
  until: pod_state.stdout.find('WORKFLOW') != -1

- debug: msg='POD workflow started. It usually takes 5-6 hours to finish'

- debug: msg='For monitoring state use{{ ':' }} source setup-env.sh; /opt/api-server/scripts/rc_cli -H $RC_HOST -u $RC_USER -p $RC_PW pod show {{ pod_uuid }}'

